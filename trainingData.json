{
    "react.intro": {
      "questions": [
        "What is React?",
        "Can you explain what React is?"
      ],
      "answers": [
        "React is a JavaScript library for building user interfaces. It allows developers to create large web applications that can change data, without reloading the page."
      ]
    },
    "react.components": {
      "questions": [
        "What are components in React?",
        "Can you explain React components?"
      ],
      "answers": [
        "Components are the building blocks of a React application. They are reusable pieces of code that return a React element to be rendered to the page. Components can be either class-based or function-based."
      ]
    },
    "react.state": {
      "questions": [
        "What is state in React?",
        "Can you explain the concept of state in React?"
      ],
      "answers": [
        "State is a built-in object that stores property values that belong to a component. When the state object changes, the component re-renders. State is used for managing dynamic data in an application."
      ]
    },
    "react.props": {
      "questions": [
        "What are props in React?",
        "Can you explain props in React?"
      ],
      "answers": [
        "Props (short for properties) are read-only attributes used to pass data from one component to another. They are passed to the component in a way similar to arguments passed in a function call."
      ]
    },
    "react.jsx": {
      "questions": [
        "What is JSX?",
        "Can you explain JSX in React?"
      ],
      "answers": [
        "JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like createElement() or appendChild()."
      ]
    },
    "react.lifecycle_methods": {
      "questions": [
        "What are React lifecycle methods?",
        "Can you explain the lifecycle methods of React components?"
      ],
      "answers": [
        "Lifecycle methods are functions that get called at different stages of a component's life in React. They include methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
      ]
    },
    "react.useeffect": {
      "questions": [
        "What is the useEffect hook in React?",
        "Can you explain useEffect in React?"
      ],
      "answers": [
        "useEffect is a hook in React that allows you to perform side effects in function components. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React class components."
      ]
    },
    "react.virtualdom": {
      "questions": [
        "What is the virtual DOM?",
        "Can you explain the concept of virtual DOM in React?"
      ],
      "answers": [
        "The virtual DOM is a lightweight representation of the real DOM. When the state of an object changes, the virtual DOM changes only the object in the real DOM, rather than reloading the entire DOM. This makes the update process faster."
      ]
    },
    "react.router": {
      "questions": [
        "What is React Router?",
        "Can you explain the use of React Router?"
      ],
      "answers": [
        "React Router is a standard library for routing in React. It enables navigation among views or different components in a React application, allowing for single-page applications with navigation without refreshing the whole page."
      ]
    },
    "react.redux": {
      "questions": [
        "What is Redux?",
        "Can you explain Redux in React?"
      ],
      "answers": [
        "Redux is a predictable state container for JavaScript applications. It helps you manage the state of your application in a consistent way, making it easier to manage and debug. It is often used with React for managing state across the entire application."
      ]
    }
  }
  